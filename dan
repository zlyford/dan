#!/usr/bin/python

# for some reason numpy is not installed for python 3 on the CCIS machines...
import sys
import wave
import array
import os
import subprocess
import tempfile
import magic

import numpy


# List of acceptable command "flags"
flags = ['-f', '-d']

# lame executable location
lame = os.path.normpath('/course/cs4500f14/bin/lame')

# cache of processed files/fingerprints
cache = {}


# Returns the short name of the file
def get_short_name(path):
    return os.path.basename(os.path.normpath(path))


# process file for comparison; returns array of ints of the wave file samples
def process_file(path):
    f = normalize(path)
    f_info = f.getparams()
    nframes = f_info[3]
    # reads the wave file data
    byte_string = f.readframes(nframes)
    f.close()
    # convert that into an array of ints
    return array.array('h', byte_string)


# Main function for comparing two audio files or directories
def compare(path1, path2):
    a1 = process_file(path1)
    a2 = process_file(path2)
    # find the correlation matrix between them
    # TODO: maybe find the actual length of the files before comparing
    if len(a1) == len(a2):
        corr = numpy.corrcoef(a1, a2)
        # if the files are pretty similar, return match, otherwise no match
        if corr[0][1] > 0.9:
            path1 = get_short_name(path1)
            path2 = get_short_name(path2)
            print("MATCH " + path1 + " " + path2)

def check_file(path):
    try:
        m = magic.open(magic.MAGIC_SYMLINK)
        m.load()
        filetype = m.file(path)
        if "WAVE" in filetype:
            return "wav"
        if "layer III" in filetype:
            return "mp3"
        sys.stderr.write("ERROR: invalid file type" + filetype + "\n")
        sys.exit(-1)
    except Exception as e:
        sys.stderr.write("ERROR: could not open file " + path + "\n")
        sys.exit(-1)

def normalize(path):
    filetype = check_file(path)
    command = []
    temp_file, temp_path = tempfile.mkstemp(dir='/tmp')
    if filetype == "mp3":
        command = [lame, '--decode', '--quiet', '--mp3input', '-m', 'm', '-b', '16', '--resample', '8', path, temp_path]
    else:  # wave
        command = [lame, '--decode', '--quiet', '-m', 'm', '-b', '16', '--resample', '8', path, temp_path]
    try:
        subprocess.check_call(command)
    except:
        sys.stderr.write('ERROR: could not normalize file\n')
        sys.exit(-1)
    return wave.open(temp_path)


# Parse arguments
if __name__ == '__main__':
    if (len(sys.argv) != 5) or (sys.argv[1] and sys.argv[3] not in flags):
        sys.stderr.write('ERROR: incorrect command line\n')
        sys.exit(-1)
    elif sys.argv[1] == '-f' and sys.argv[3] == '-f':  # both are files
        compare(sys.argv[2], sys.argv[4])
        sys.exit(0)
    elif sys.argv[1] == '-f' and sys.argv[3] == '-d':  # first is file, second is directory
        try:
            file_list = os.listdir(sys.argv[4])
        except OSError:
            sys.stderr.write('ERROR: invalid directory\n')
            sys.exit(-1)
        for f in file_list:
            f = os.path.join(sys.argv[4], f)
            compare(sys.argv[2], f)
    elif sys.argv[1] == '-d' and sys.argv[3] == '-f':  # TODO: probably a better way of doing this
        try:
            file_list = os.listdir(sys.argv[2])
        except OSError:
            sys.stderr.write('ERROR: invalid directory\n')
            sys.exit(-1)
        for f in file_list:
            f = os.path.join(sys.argv[2], f)
            compare(sys.argv[4], f)
    elif sys.argv[1] == '-d' and sys.argv[3] == '-d':  # both are directories
        try:
            file_list1 = os.listdir(sys.argv[2])
        except:
            sys.stderr.write('ERROR: invalid directory\n')
            sys.exit(-1)
        try:
            file_list2 = os.listdir(sys.argv[4])
        except:
            sys.stderr.write('ERROR: invalid directory\n')
            sys.exit(-1)
        for f in file_list1:  # TODO: this is probably really inefficient
            f = os.path.join(sys.argv[2], f)
            for g in file_list2:
                g = os.path.join(sys.argv[4], g)
                compare(f, g)
