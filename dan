#!/usr/bin/python

import sys
import wave
import audioop
import array
import os
import subprocess
import tempfile
import numpy
import atexit
from operator import itemgetter
import scipy.io.wavfile
import math


# List of acceptable command "flags"
FLAGS = ['-f', '-d']

# acceptable file extensions
FILE_EXTENSIONS = ['.wav', '.mp3']

# lame executable location
LAME = os.path.normpath('/course/cs4500f14/bin/lame')

# cache of processed files/fingerprints
CACHE = {}

# temp file paths/descriptors, for deleting at the end
TEMP_FILES = []


# Returns the short name of the file
def get_short_name(path):
    return os.path.basename(os.path.normpath(path))


# delete temp files when finished
@atexit.register
def delete_temp_files():
    for f in TEMP_FILES:
        os.close(f[0])
        os.remove(f[1])


# process file for comparison; returns array of ints of the wave file samples
def process_file(path):
    if path not in CACHE:
        f = normalize(path)
        # make fingerprint
        fp = fingerprint(f)
        CACHE[path] = fp  # add it to the cache
        return fp
    else:
        return CACHE[path]


def fingerprint(path):
    fp = []
    wf = wave.open(path)
    nframes = wf.getnframes()
    rate, data = scipy.io.wavfile.read(path)
    chunksize = rate / 10
    for i in range(0, nframes, chunksize):
        chunk = data[i:i+chunksize]
        fft = [abs(j) for j in numpy.fft.rfft(chunk)]
        result = max(enumerate(fft), key=itemgetter(1))[0] * rate / len(chunk)
        fp.append(result)
    return fp


# Compares two files
def compare(path1, path2):
    a1 = process_file(path1)
    a2 = process_file(path2)
    # find the correlation matrix between them
    if len(a1) == len(a2):
        corr = numpy.corrcoef(a1, a2)
        #print path1 + " " + path2 + " " + str(corr[0][1])
        # if the files are pretty similar, return match, otherwise no match
        if corr[0][1] > 0.7:
            path1 = get_short_name(path1)
            path2 = get_short_name(path2)
            print("MATCH " + path1 + " " + path2)


def compare_lists(list1, list2):
    for f in list1:
        for g in list2:
            compare(f, g)


def check_file(path):
    try:
        fileext = os.path.splitext(path)[1]
        if fileext in FILE_EXTENSIONS:
            return
        sys.stderr.write("ERROR: invalid file type " + fileext + "\n")
        sys.exit(-1)
    except Exception as e:
        sys.stderr.write("ERROR: could not open file " + path + "\n")
        sys.exit(-1)


"""
Normalizes audio files; converts them to wav, mono, 16000 sample rate as a temp file in /tmp/
Returns: path of the wave file
"""
def normalize(path):
    check_file(path)
    temp_file, temp_path = tempfile.mkstemp(dir='/tmp')
    command = [LAME, '--decode', '--quiet', '--resample', '16', '-m', 'm', '-b', '16', path, temp_path]
    try:
        subprocess.check_call(command)
    except:
        sys.stderr.write('ERROR: could not normalize file\n')
        sys.exit(-1)
    # re-normalize it because lame doesn't actually do anything with a wav file
    f = wave.open(temp_path)
    nframes = f.getnframes()
    nchannels = f.getnchannels()
    frames = f.readframes(nframes)
    f.close()

    temp_file2, temp_path2 = tempfile.mkstemp(dir='/tmp')
    wavefile = wave.open(temp_path2, 'wb')
    wavefile.setparams((1, 2, 16000, nframes, 'NONE', 'NONE'))
    if nchannels != 1:
        frames = audioop.tomono(frames, 2, 1, 1)
    wavefile.writeframes(frames)
    wavefile.close()
    os.close(temp_file)
    os.remove(temp_path)

    TEMP_FILES.append((temp_file2, temp_path2))  # add file descriptor and its path for later removal
    return temp_path2


def process_directory(dir):
    files = []
    try:
        file_list = os.listdir(dir)
    except:
        sys.stderr.write('ERROR: invalid directory\n')
        sys.exit(-1)
    for f in file_list:
        f = os.path.join(dir, f)
        files.append(f)
    return files


# Parse arguments
if __name__ == '__main__':
    if (len(sys.argv) != 5) or (sys.argv[1] and sys.argv[3] not in FLAGS):
        sys.stderr.write('ERROR: incorrect command line\n')
        sys.exit(-1)

    # initialize lists of files
    list1 = []
    list2 = []

    if sys.argv[1] == '-f':
        list1.append(sys.argv[2])
    else:
        list1 = process_directory(sys.argv[2])
    if sys.argv[3] == '-f':
        list2.append(sys.argv[4])
    else:
        list2 = process_directory(sys.argv[4])

    compare_lists(list1, list2)
